var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { jsx as _jsx, jsxs as _jsxs } from "preact/jsx-runtime";
import { useLayoutEffect } from 'preact/hooks';
import { useMemo } from 'preact/hooks';
import { useRef } from 'preact/hooks';
import { useEffect } from 'preact/hooks';
import { useState } from 'preact/hooks';
import { getLangText } from './lang.js';
export function SelectAccount(props) {
    const [index, setIndex] = useState(0);
    const [accounts, setAccounts] = useState([]);
    const [loading, setLoading] = useState(false);
    const loadBtnRef = useRef(null);
    const langText = useMemo(() => getLangText(), []);
    useEffect(() => {
        setAccounts([...props.accounts]);
    }, [props.accounts]);
    useEffect(() => {
        setIndex(props.selectedIndex);
    }, [props.selectedIndex]);
    function onInput(e) {
        setIndex(+e.target.value);
    }
    function onConfirm() {
        const selected = accounts.find((item) => item.index === index);
        props.onConfirm(selected || (accounts === null || accounts === void 0 ? void 0 : accounts[0]));
    }
    function onCancel() {
        props.onCancel();
    }
    function onLoadMore() {
        return __awaiter(this, void 0, void 0, function* () {
            setLoading(true);
            const last = accounts[accounts.length - 1] || { index: -1 };
            const from = last.index + 1;
            const to = last.index + 6;
            try {
                const result = yield props.getAccounts(from, to);
                setAccounts((accounts) => [...accounts, ...result]);
            }
            finally {
                setLoading(false);
            }
        });
    }
    useLayoutEffect(() => {
        var _a, _b;
        (_b = (_a = loadBtnRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView) === null || _b === void 0 ? void 0 : _b.call(_a);
    }, [accounts]);
    return (_jsxs("div", Object.assign({ style: { paddingLeft: 40 }, className: "ledger-select", "data-testid": "select-account-content" }, { children: [_jsx("span", Object.assign({ className: "title" }, { children: langText.selectTip })), _jsxs("div", Object.assign({ className: "ledger-select-list-wrap" }, { children: [_jsx("ul", Object.assign({ className: "ledger-select-list", "data-testid": "select-account-list" }, { children: accounts.map((account, idx) => {
                            return (_jsx("li", Object.assign({ className: "ledger-select-item" }, { children: _jsxs("label", Object.assign({ htmlFor: `ledger-select-radio${idx}` }, { children: [_jsx("input", { className: account.index === index ? 'checked' : '', id: `ledger-select-radio${idx}`, type: "radio", name: "selectedAddress", value: account.index, checked: account.index === index, onInput: onInput }), _jsx("span", { children: account.address })] })) }), idx));
                        }) })), _jsx("div", Object.assign({ style: { display: 'flex', justifyContent: 'flex-end' } }, { children: _jsxs("button", Object.assign({ "data-testid": "btn-load-more", ref: loadBtnRef, style: { marginTop: 10 }, disabled: loading, className: "ledger-select-button", onClick: onLoadMore }, { children: [_jsx("span", Object.assign({ style: { marginRight: loading ? 10 : 0 } }, { children: langText.loadMore })), loading ? (
                                /* prettier-ignore */
                                _jsx("svg", Object.assign({ width: "18", height: "18", viewBox: "0 0 38 38", xmlns: "http://www.w3.org/2000/svg", stroke: "#fff" }, { children: _jsx("g", Object.assign({ fill: "none", fillRule: "evenodd" }, { children: _jsxs("g", Object.assign({ transform: "translate(1 1)", strokeWidth: "2" }, { children: [_jsx("circle", { strokeOpacity: ".5", cx: "18", cy: "18", r: "18" }), _jsx("path", Object.assign({ d: "M36 18c0-9.94-8.06-18-18-18" }, { children: _jsx("animateTransform", { attributeName: "transform", type: "rotate", from: "0 18 18", to: "360 18 18", dur: "1s", repeatCount: "indefinite" }) }))] })) })) }))) : null] })) }))] })), _jsxs("footer", Object.assign({ style: { display: 'flex', justifyContent: 'flex-end' } }, { children: [_jsx("button", Object.assign({ "data-testid": "btn-cancel", style: { marginRight: 10 }, className: "ledger-select-button default-button", onClick: onCancel }, { children: langText.cancel })), _jsx("button", Object.assign({ "data-testid": "btn-confirm", disabled: loading, className: "ledger-select-button", onClick: onConfirm }, { children: langText.confirm }))] }))] })));
}
//# sourceMappingURL=SelectAccount.js.map