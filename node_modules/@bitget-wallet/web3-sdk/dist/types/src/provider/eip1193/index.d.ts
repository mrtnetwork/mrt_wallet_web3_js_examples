import SafeEventEmitter from '@metamask/safe-event-emitter';
import { AddressString, Callback } from './types';
import { EIP1193Web3ProviderType, RequestArguments } from './types';
import { JsonRpcResponse, JsonRpcRequest, EIP1193ProviderOptions, EventNames } from './types';
export declare class EIP1193Provider extends SafeEventEmitter implements EIP1193Web3ProviderType {
    constructor(options: Readonly<EIP1193ProviderOptions>);
    /** @deprecated Use `.request({ method: 'eth_accounts' })` instead. */
    get selectedAddress(): AddressString | undefined;
    /** @deprecated Use the chain ID. If you still need the network ID, use `.request({ method: 'net_version' })`. */
    get networkVersion(): string;
    /** @deprecated Use `.request({ method: 'eth_chainId' })` instead. */
    get chainId(): string;
    get isMetaMask(): boolean;
    get isBitKeep(): boolean;
    get connected(): boolean;
    on<T = string>(eventName: EventNames | T, fn: Function): this;
    isConnected(): boolean;
    /** @deprecated Use `.request({ method: 'eth_requestAccounts' })` instead. */
    enable(): Promise<AddressString[]>;
    close(): Promise<void>;
    /** @deprecated Use `.request(...)` instead. */
    send(request: JsonRpcRequest): JsonRpcResponse;
    send(request: JsonRpcRequest[]): JsonRpcResponse[];
    send(request: JsonRpcRequest, callback: Callback<JsonRpcResponse>): void;
    send(request: JsonRpcRequest[], callback: Callback<JsonRpcResponse[]>): void;
    send<T = any>(method: string, params?: any[] | any): Promise<T>;
    private _send;
    /** @deprecated Use `.request(...)` instead. */
    sendAsync(request: JsonRpcRequest, callback: Callback<JsonRpcResponse>): void;
    sendAsync(request: JsonRpcRequest[], callback: Callback<JsonRpcResponse[]>): void;
    private _sendAsync;
    request<T>(args: RequestArguments): Promise<T>;
    private _post;
    disconnect(): boolean;
}
