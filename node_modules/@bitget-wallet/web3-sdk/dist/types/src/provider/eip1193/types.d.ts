interface Tag<T extends string, RealType> {
    __tag__: T;
    __realType__: RealType;
}
export type OpaqueType<T extends string, U> = U & Tag<T, U>;
export declare function OpaqueType<T extends Tag<any, any>>(): (value: T extends Tag<any, infer U> ? U : never) => T;
export type HexString = OpaqueType<'HexString', string>;
export declare const HexString: (value: string) => HexString;
export type AddressString = OpaqueType<'AddressString', string>;
export declare const AddressString: (value: string) => AddressString;
export type BigIntString = OpaqueType<'BigIntString', string>;
export declare const BigIntString: (value: string) => BigIntString;
export type IntNumber = OpaqueType<'IntNumber', number>;
export declare function IntNumber(num: number): IntNumber;
export type RegExpString = OpaqueType<'RegExpString', string>;
export declare const RegExpString: (value: string) => RegExpString;
export type Callback<T> = (err: Error | null, result: T | null) => void;
export declare enum JSONRPCMethod {
    eth_accounts = "eth_accounts",
    eth_coinbase = "eth_coinbase",
    net_version = "net_version",
    eth_chainId = "eth_chainId",
    eth_uninstallFilter = "eth_uninstallFilter",
    eth_requestAccounts = "eth_requestAccounts",
    eth_sign = "eth_sign",
    eth_ecRecover = "eth_ecRecover",
    personal_sign = "personal_sign",
    personal_ecRecover = "personal_ecRecover",
    eth_signTransaction = "eth_signTransaction",
    eth_sendRawTransaction = "eth_sendRawTransaction",
    eth_sendTransaction = "eth_sendTransaction",
    eth_signTypedData_v1 = "eth_signTypedData_v1",
    eth_signTypedData_v2 = "eth_signTypedData_v2",
    eth_signTypedData_v3 = "eth_signTypedData_v3",
    eth_signTypedData_v4 = "eth_signTypedData_v4",
    eth_signTypedData = "eth_signTypedData",
    wallet_addEthereumChain = "wallet_addEthereumChain",
    wallet_switchEthereumChain = "wallet_switchEthereumChain",
    wallet_watchAsset = "wallet_watchAsset",
    eth_subscribe = "eth_subscribe",
    eth_unsubscribe = "eth_unsubscribe",
    eth_newFilter = "eth_newFilter",
    eth_newBlockFilter = "eth_newBlockFilter",
    eth_newPendingTransactionFilter = "eth_newPendingTransactionFilter",
    eth_getFilterChanges = "eth_getFilterChanges",
    eth_getFilterLogs = "eth_getFilterLogs"
}
export interface JsonRpcRequest<T = any> {
    jsonrpc: '2.0';
    id: number;
    method: string;
    params: T;
}
export interface JsonRpcResponse<T = any, U = any> {
    jsonrpc: '2.0';
    id: number;
    result?: T;
    error?: {
        code: number;
        message: string;
        data?: U;
    } | null;
}
export interface RequestArguments {
    /** The RPC method to request. */
    method: string;
    /** The params of the RPC method, . */
    params?: unknown[] | Record<string, unknown>;
}
export type EIP1193Web3ProviderType = {
    send(request: JsonRpcRequest): JsonRpcResponse;
    send(request: JsonRpcRequest[]): JsonRpcResponse[];
    send(request: JsonRpcRequest, callback: Callback<JsonRpcResponse>): void;
    send(request: JsonRpcRequest[], callback: Callback<JsonRpcResponse[]>): void;
    send<T = any>(method: string, params?: any[] | any): Promise<T>;
    sendAsync(request: JsonRpcRequest, callback: Callback<JsonRpcResponse>): void;
    sendAsync(request: JsonRpcRequest[], callback: Callback<JsonRpcResponse[]>): void;
    request<T>(args: RequestArguments): Promise<T>;
    connected: boolean;
    chainId: string;
    disconnect(): boolean;
};
export interface EIP1193ProviderOptions {
    chainId: number;
    isLedger?: boolean;
}
export type EventNames = "connect" | "chainChanged" | "networkChanged" | "accountsChanged" | "close" | "disconnect";
export {};
