import { AbstractAdapter } from '../adapters/AbstractAdapter';
import type { EIP1193Provider } from './eip1193';
import type { TronLinkProvider, TronLink, TronWeb } from './tronLink';
import type { SolanaProvider } from './solana';
export { EIP1193Provider, SolanaProvider, TronLinkProvider, TronLink, TronWeb, };
export declare enum SupportProviderFlag {
    'EVM' = "eip1193",
    'TRON' = "tronLink",
    'SOLANA' = "solana"
}
export declare const InitProviderEventNames: {
    eip1193: string;
    tronLink: string;
    solana: string;
};
export interface BitKeepGlobal {
    ethereum: EIP1193Provider;
    tronLink: TronLinkProvider['tronLink'];
    tronWeb: TronLinkProvider['tronWeb'];
    solana: SolanaProvider;
}
export type WaleltProvider<U extends keyof BitKeepGlobal, T> = BitKeepGlobal[U] | TronLinkProvider | T;
export declare const getWalletProvierInitEventsName: (flag: SupportProviderFlag) => string | undefined;
/**
 * @description
 * @param flag
 * @returns
 */
export declare const getWaleltProvider: <T>(flag: SupportProviderFlag) => WaleltProvider<keyof BitKeepGlobal, T> | null;
export declare const findFlagAdapter: (flag: SupportProviderFlag, adapters: AbstractAdapter[]) => AbstractAdapter;
export declare const currentProvider: () => any;
/**
 * @param options - Options.
 * @param options.timeout - Milliseconds to wait for '*#initialized' to
 * be dispatched. Default: 1000
 * @returns A Promise that resolves with the Provider if it is detected within
 * given timeout, otherwise null.
 */
declare function detectBitkeepProvider<T>({ timeout, flag, }?: {
    timeout?: number | undefined;
    flag?: SupportProviderFlag | undefined;
}): Promise<WaleltProvider<keyof BitKeepGlobal, T> | null>;
export { detectBitkeepProvider };
